<?xml version="1.0"?>
<!--
Copyright 2011 Matt DeVore

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="Andradion 2" default="linkExe" basedir=".">
  <condition property="build.flavor" value="_DEBUG" else="_RELEASE">
    <istrue value="${debug}" />
  </condition>
  <condition property="obj.dir" value="out/debug" else="out/release">
    <istrue value="${debug}" />
  </condition>

  <target name="clean">
    <delete dir="out" />
    <delete file="StdAfx.obj" />
    <delete file="StdAfx.pch" />
  </target>

  <target name="buildJavaSource">
    <mkdir dir="out/java/src" />
    <javac debug="true" srcdir="java/src" destdir="out/java/src">
      <compilerarg value="-Xlint" />
    </javac>
  </target>

  <target name="declareCustomTasks" depends="buildJavaSource">
    <taskdef name="msvcCompile"
             classname="com.github.matvore.andradion2.ant.MsvcCompile"
             classpath="out/java/src" />
    <taskdef name="msvcLink"
             classname="com.github.matvore.andradion2.ant.MsvcLink"
             classpath="out/java/src" />
    <taskdef name="levelTextToBinary"
             className="com.github.matvore.andradion2.ant.LevelTextToBinary"
             classpath="out/java/src" />
    <taskdef name="runCompacterMapper"
             className="com.github.matvore.andradion2.ant.RunCompacterMapper"
             classpath="out/java/src" />
    <taskdef name="wav2raw"
             className="com.github.matvore.andradion2.ant.Wav2Raw"
             classPath="out/java/src" />
  </target>

  <target name="compacterMapper" depends="declareCustomTasks">
    <mkdir dir="out/levels" />
    <compacterMapperForLevel levelId="1_" />
    <compacterMapperForLevel levelId="2a" />
    <compacterMapperForLevel levelId="2b" />
    <compacterMapperForLevel levelId="3a" />
    <compacterMapperForLevel levelId="3b" />
    <compacterMapperForLevel levelId="4_" />
    <compacterMapperForLevel levelId="5_" />
    <compacterMapperForLevel levelId="6a" />
    <compacterMapperForLevel levelId="6b" />
    <compacterMapperForLevel levelId="7a" />
    <compacterMapperForLevel levelId="7b" />
  </target>

  <target name="sfx" depends="declareCustomTasks">
    <mkdir dir="out/resource/wav" />
    <wav2raw output="out/resource/wav/sfx.dat">
      <input path="resource/wav/Warpout.wav" />
      <input path="resource/wav/lightrain.wav" />
      <input path="resource/wav/heavyrain.wav" />
      <input path="resource/wav/crickets.wav" />
      <input path="resource/wav/thunder1.wav" />
      <input path="resource/wav/thunder2.wav" />
      <input path="resource/wav/thunder3.wav" />
      <input path="resource/wav/okgotit.wav" />
      <input path="resource/wav/step.wav" />
      <input path="resource/wav/gunnoise.wav" />
      <input path="resource/wav/pistol.wav" />
      <input path="resource/wav/machinegun.wav" />
      <input path="resource/wav/bazooka.wav" />
      <input path="resource/wav/alienhit1.wav" />
      <input path="resource/wav/alienhit2.wav" />
      <input path="resource/wav/alienhit3.wav" />
      <input path="resource/wav/aliendeath1.wav" />
      <input path="resource/wav/aliendeath2.wav" />
      <input path="resource/wav/aliendeath3.wav" />
      <input path="resource/wav/turnerhit1.wav" />
      <input path="resource/wav/turnerhit2.wav" />
      <input path="resource/wav/turnerhit3.wav" />
      <input path="resource/wav/turnerdeath.wav" />
      <input path="resource/wav/switzhit1.wav" />
      <input path="resource/wav/switzhit2.wav" />
      <input path="resource/wav/switzhit3.wav" />
      <input path="resource/wav/switzdeath.wav" />
      <input path="resource/wav/charminhit1.wav" />
      <input path="resource/wav/charminhit2.wav" />
      <input path="resource/wav/charminhit3.wav" />
      <input path="resource/wav/charmindeath.wav" />
      <input path="resource/wav/pepsihit1.wav" />
      <input path="resource/wav/pepsihit2.wav" />
      <input path="resource/wav/pepsihit3.wav" />
      <input path="resource/wav/pepsideath.wav" />
      <input path="resource/wav/cokehit1.wav" />
      <input path="resource/wav/cokehit2.wav" />
      <input path="resource/wav/cokehit3.wav" />
      <input path="resource/wav/cokedeath.wav" />
      <input path="resource/wav/koolaidehit1.wav" />
      <input path="resource/wav/koolaidehit2.wav" />
      <input path="resource/wav/koolaidehit3.wav" />
      <input path="resource/wav/koolaidedeath.wav" />
      <input path="resource/wav/zap.wav" />
      <input path="resource/wav/wammo.wav" />
      <input path="resource/wav/pow.wav" />
      <input path="resource/wav/bing.wav" />
    </wav2raw>
  </target>

  <target name="levelBinaries" depends="declareCustomTasks">
    <mkdir dir="out/levels" />
    <levelTextToBinary input="levels/1_.dat"
                       output="out/levels/1_.lvl" />
    <levelTextToBinary input="levels/2a.dat"
                       output="out/levels/2a.lvl" />
    <levelTextToBinary input="levels/2b.dat"
                       output="out/levels/2b.lvl" />
    <levelTextToBinary input="levels/3a.dat"
                       output="out/levels/3a.lvl" />
    <levelTextToBinary input="levels/3b.dat"
                       output="out/levels/3b.lvl" />
    <levelTextToBinary input="levels/4_.dat"
                       output="out/levels/4_.lvl" />
    <levelTextToBinary input="levels/5_.dat"
                       output="out/levels/5_.lvl" />
    <levelTextToBinary input="levels/6a.dat"
                       output="out/levels/6a.lvl" />
    <levelTextToBinary input="levels/6b.dat"
                       output="out/levels/6b.lvl" />
    <levelTextToBinary input="levels/7a.dat"
                       output="out/levels/7a.lvl" />
    <levelTextToBinary input="levels/7b.dat"
                       output="out/levels/7b.lvl" />
  </target>

  <macrodef name="compileOneCpp">
    <attribute name="name" />
    <sequential>
      <msvcCompile>
        <!-- Compile and don't link. -->
        <arg flag="/c" />
        <!-- Exception handling behavior. -->
        <arg flag="/EHsc" />
        <arg flag="/I" path="./dxinclude" />
        <arg flag="/YuStdAfx.h" />
        <arg flag="/Fo" path="${obj.dir}/@{name}.obj" />
        <arg flag="/D${build.flavor}" />

        <arg path="@{name}.cpp" />
      </msvcCompile>
    </sequential>
  </macrodef>

  <macrodef name="compacterMapperForLevel">
    <attribute name="levelId" />
    <sequential>
      <runCompacterMapper input="levels/@{levelId}_.png"
                          output="out/levels/@{levelId}_.cmpset"
                          levelFile="levels/@{levelId}.dat"
                          minimumColorBlockArea="16"
                          minimumPatternArea="16"
                          sectorWidth="160"
                          sectorHeight="120">
        <patternSize width="4" height="4" />
      </runCompacterMapper>
      <runCompacterMapper input="levels/@{levelId}u.png"
                          output="out/levels/@{levelId}u.cmpset"
                          levelFile="levels/@{levelId}.dat"
                          minimumColorBlockArea="16"
                          minimumPatternArea="16"
                          sectorWidth="160"
                          sectorHeight="120">
        <patternSize width="4" height="4" />
      </runCompacterMapper>
    </sequential>
  </macrodef>

  <target name="buildCpp" depends="declareCustomTasks">
    <!-- Create the precompiled header. -->
    <msvcCompile>
      <!-- Compile and don't link. -->
      <arg flag="/c" />
      <!-- Exception handling behavior. -->
      <arg flag="/EHsc" />
      <arg flag="/I" path="./dxinclude" />
      <arg flag="/Yc" />
      <arg flag="/Fp" path="StdAfx.pch" />

      <arg path="StdAfx.cpp" />
    </msvcCompile>
    <mkdir dir="${obj.dir}" />
    <compileOneCpp name="BitMatrix" />
    <compileOneCpp name="Character" />
    <compileOneCpp name="CompactMap" />
    <compileOneCpp name="Deeds" />
    <compileOneCpp name="Fire" />
    <compileOneCpp name="Fixed" />
    <compileOneCpp name="GammaEffects" />
    <compileOneCpp name="Glue" />
    <compileOneCpp name="Graphics" />
    <compileOneCpp name="LevelEnd" />
    <compileOneCpp name="Menu" />
    <compileOneCpp name="MusicLib" />
    <compileOneCpp name="Net" />
    <compileOneCpp name="Palette" />
    <compileOneCpp name="PowerUp" />
    <compileOneCpp name="Profiler" />
    <compileOneCpp name="RawLoad" />
    <compileOneCpp name="Timer" />
    <compileOneCpp name="Weather" />
    <compileOneCpp name="WinMain" />
  </target>

  <target name="linkExe" depends="buildCpp">
    <msvcLink>
      <arg flag="/MACHINE:X86" />
      <arg flag="/OUT:" path="${obj.dir}/andradion2.exe" />
      <arg path="${obj.dir}/Andradion 2.res" />
      <arg path="${obj.dir}/BitMatrix.obj" />
      <arg path="${obj.dir}/Character.obj" />
      <arg path="${obj.dir}/CompactMap.obj" />
      <arg path="${obj.dir}/Deeds.obj" />
      <arg path="${obj.dir}/Fire.obj" />
      <arg path="${obj.dir}/Fixed.obj" />
      <arg path="${obj.dir}/GammaEffects.obj" />
      <arg path="${obj.dir}/Glue.obj" />
      <arg path="${obj.dir}/Graphics.obj" />
      <arg path="${obj.dir}/LevelEnd.obj" />
      <arg path="${obj.dir}/Menu.obj" />
      <arg path="${obj.dir}/MusicLib.obj" />
      <arg path="${obj.dir}/Net.obj" />
      <arg path="${obj.dir}/Palette.obj" />
      <arg path="${obj.dir}/PowerUp.obj" />
      <arg path="${obj.dir}/Profiler.obj" />
      <arg path="${obj.dir}/RawLoad.obj" />
      <arg path="${obj.dir}/Timer.obj" />
      <arg path="${obj.dir}/Weather.obj" />
      <arg path="${obj.dir}/WinMain.obj" />
      <standardLib name="gdi32.lib" />
      <standardLib name="ole32.lib" />
      <standardLib name="user32.lib" />
      <arg path="dxlib/dxguid.lib" />
      <arg path="dxlib/dplayx.lib" />
    </msvcLink>
  </target>
</project>
